-- -*- Mode: SQL -*-

CREATE DATABASE IF NOT EXISTS Convoy;

USE Convoy;

CREATE TABLE IF NOT EXISTS Scrapes (
       ScrapeId		BIGINT		NOT NULL AUTO_INCREMENT,
       StartTime	DATETIME	NOT NULL,
       FinishTime	DATETIME,
       PRIMARY KEY (`ScrapeId`))
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS TruckLoads (
       ScrapeId		BIGINT		NOT NULL,
       PickupDate	DATE		NOT NULL,
       OriginState	CHAR(2) 	NOT NULL,
       OriginCity	VARCHAR(64) 	NOT NULL,
       DestState	CHAR(2) 	NOT NULL,
       DestCity		VARCHAR(64) 	NOT NULL,
       LoadType		VARCHAR(16) 	NOT NULL,
       Length		INTEGER 	NOT NULL,
       Weight		INTEGER 	NOT NULL,
       Equipment	VARCHAR(64) 	NOT NULL,
       Price		INTEGER 	NOT NULL,
       Stops		INTEGER 	NOT NULL,
       Phone		VARCHAR(16) 	NOT NULL,

       INDEX OCityState	 (OriginCity, OriginState) USING HASH,
       INDEX DCityState	 (DestCity, DestState) USING HASH,
       FOREIGN KEY (`ScrapeId`) REFERENCES Scrapes(`ScrapeId`))
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS Corrections (
       InCity 		 VARCHAR(64)	NOT NULL,
       InState		 CHAR(2)	NOT NULL,
       OutCity 		 VARCHAR(64)	NOT NULL,
       OutState		 CHAR(2)	NOT NULL,
       Determined        VARCHAR(64)	NOT NULL,

       INDEX ICityState	 (InCity, InState) USING HASH,
       INDEX OCityState	 (OutCity, OutState) USING HASH,
       PRIMARY KEY (InCity, InState)
       )
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS Locations (
       LocCity 		 VARCHAR(64)	NOT NULL,
       LocState		 CHAR(2)	NOT NULL,
       Latitude		 DOUBLE		NOT NULL,
       Longitude	 DOUBLE		NOT NULL,
       Determined        VARCHAR(64)	NOT NULL,

       INDEX LCityState	 (LocCity, LocState) USING HASH,
       PRIMARY KEY (LocCity, LocState)
       )
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS GoogleUnknown (
       UnknownCity   	   VARCHAR(64)	NOT NULL,
       UnknownState	   CHAR(2)	NOT NULL,

       INDEX GUCityState   (UnknownCity, UnknownState) USING HASH,
       PRIMARY KEY (UnknownCity, UnknownState)
       )
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS WikipediaUnknown (
       UnknownUri   	   VARCHAR(128)	NOT NULL,

       INDEX UUri  (UnknownUri) USING HASH,
       PRIMARY KEY (UnknownUri)
       )
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE TABLE IF NOT EXISTS RoadDistance (
       SourceCity 		 VARCHAR(64)	NOT NULL,
       SourceState		 CHAR(2)	NOT NULL,
       DestCity 		 VARCHAR(64)	NOT NULL,
       DestState		 CHAR(2)	NOT NULL,
       Kilometers		 INTEGER	NOT NULL,

       INDEX EndPoints (SourceCity, SourceState, DestCity, DestState) USING HASH,
       PRIMARY KEY (SourceCity, SourceState, DestCity, DestState)
       )
       CHARACTER SET = utf8,
       COLLATE = utf8_bin;

CREATE VIEW LoadCityStates (C, S) AS 
       SELECT OriginCity C, OriginState S FROM TruckLoads
       UNION ALL SELECT DestCity C, DestState S FROM TruckLoads;

CREATE VIEW GeoCityStates (C, S) AS 
       SELECT InCity C, InState S FROM Corrections
       UNION ALL SELECT LocCity C, LocState S FROM Locations;

CREATE VIEW LoadCityStatesGrouped (C, S) AS
       SELECT C, S FROM LoadCityStates GROUP BY C, S;

CREATE VIEW GeoCityStatesGrouped (C, S) AS
	SELECT C, S FROM GeoCityStates AS Places GROUP BY C, S;

-- TODO(jmacd) Apparently this is slow because MySQL decides
-- to do sequential scan for very large "IN" expressions; fix.
CREATE VIEW UnknownCityStates (C, S) AS 
       SELECT C, S FROM LoadCityStatesGrouped
       WHERE (C, S) NOT IN (SELECT C, S FROM GeoCityStatesGrouped);

-- TODO(jmacd): A view of missing locations, i.e., ones with a correction
-- (OutCity, OutState) that does not appear in Locations.

